page.title=How to initialise a chat
doc.type=samples
@jd:body
<div class="background-sdk">
	<div class="content-block" style="min-height:700px;">
		<div class="intro center">
			<p><h1>How to initialise a chat</h1></p>
			<p><span>Initiate a chat session using <a href="{@docRoot}javadoc/org/gsma/joyn/chat/ChatService.html" >ChatService</a>.</span></p>
		</div>
		<div class="content-body center">
			<div class="guide-block">
				<h2>Connect to <a href="{@docRoot}javadoc/org/gsma/joyn/chat/ChatService.html" >ChatService</a>, implement listener methods</h2>
				<p></p>
				<p>In order to call ChatService methods, the application first needs to be connect to it. For information on connecting to a service you can refer to the <a href="{@docRoot}samples/connectService.html">How to connect to a joyn service</a> sample.</p>
				<p></p>
				<p>Use the <code>onServiceRegistered</code> and <code>onServiceUnregistered</code> methods to activate UI components only when remote calls are possible.</p>
				<p></p>
			</div>
			</br>
			<div class="guide-block">
				<h2>Get contacts and check capabilities</h2>
				<p></p>
				<p>Refer to <a href="{@docRoot}samples/listContacts.html">How to get list of online contacts</a> to be able to chat with one of your contacts.</p>
				<p></p>
			</div>
			</br>
			<div class="guide-block">
				<h2>Initiate chat</h2>
				<p></p>
				<p>To initiate a chat you must call the <a href="{@docRoot}javadoc/org/gsma/joyn/chat/ChatService.html" >ChatService</a> API method <a href="{@docRoot}javadoc/org/gsma/joyn/chat/ChatService.html#openSingleChat(java.lang.String, org.gsma.joyn.chat.ChatListener)">openSingleChat</a>. A contact and a <a href="{@docRoot}javadoc/org/gsma/joyn/chat/ChatListener.html">ChatListener</a> instance are needed as arguments.</p>
				<p></p>
				<div class="code-block">
					<tt class="java"><span class="java0"><br />
						&#xA0; </span><span class="java4">protected </span><span class="java9">void </span><span class="java10">initChat</span><span class="java8">(</span><span class="java10">String contact</span><span class="java8">) {&#xA0;&#xA0;&#xA0;&#xA0;&#xA0; <br />
						&#xA0;&#xA0;&#xA0; </span><span class="java3">// Open chat<br />
						&#xA0;&#xA0;&#xA0; </span><span class="java10">chat = chatApi.openSingleChat</span><span class="java8">(</span><span class="java10">contact, chatListener</span><span class="java8">)</span><span class="java10">;<br />
						&#xA0; </span><span class="java8">}<br />
						<br />
						&#xA0;&#xA0; </span>
					</tt>
				</div>
				<p></p>
				<p>You can define a new listener as inner class as follows:</p>
				<p></p>
				<div class="code-block">
					<tt class="java"><span class="java0">&#xA0;&#xA0;&#xA0; </span><span class="java14">/**<br />
						&#xA0;&#xA0;&#xA0;&#xA0; * Chat event listener<br />
						&#xA0;&#xA0;&#xA0;&#xA0; */<br />
						&#xA0;&#xA0;&#xA0; </span><span class="java4">private class </span><span class="java10">MyChatListener </span><span class="java4">extends </span><span class="java10">ChatListener </span><span class="java8">{<br />
						&#xA0;&#xA0;&#xA0;&#xA0;&#xA0; </span><span class="java3">// Callback called when a new message has been received<br />
						&#xA0;&#xA0;&#xA0;&#xA0;&#xA0; </span><span class="java4">public </span><span class="java9">void </span><span class="java10">onNewMessage</span><span class="java8">(</span><span class="java4">final </span><span class="java10">ChatMessage message</span><span class="java8">) {<br />
						&#xA0;&#xA0;&#xA0;&#xA0;&#xA0; </span><span class="java10">handler.post</span><span class="java8">(</span><span class="java4">new </span><span class="java10">Runnable</span><span class="java8">() { <br />
						&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0; </span><span class="java4">public </span><span class="java9">void </span><span class="java10">run</span><span class="java8">() {<br />
						&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0; </span><span class="java3">// Send a delivery report<br />
						&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0; </span><span class="java10">...<br />
						<br />
						&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0; </span><span class="java3">// Display the received message<br />
						&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0; </span><span class="java10">...<br />
						&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0; </span><span class="java8">}<br />
						&#xA0;&#xA0;&#xA0;&#xA0;&#xA0; })</span><span class="java10">;<br />
						&#xA0;&#xA0;&#xA0;&#xA0;&#xA0; </span><span class="java8">}<br />
						<br />
						&#xA0;&#xA0;&#xA0;&#xA0;&#xA0; </span><span class="java3">// Callback called when a message has been delivered to the remote<br />
						&#xA0;&#xA0;&#xA0;&#xA0;&#xA0; </span><span class="java4">public </span><span class="java9">void </span><span class="java10">onReportMessageDelivered</span><span class="java8">(</span><span class="java10">String msgId</span><span class="java8">) {<br />
						&#xA0;&#xA0;&#xA0;&#xA0;&#xA0; </span><span class="java10">handler.post</span><span class="java8">(</span><span class="java4">new </span><span class="java10">Runnable</span><span class="java8">(){<br />
						&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0; </span><span class="java4">public </span><span class="java9">void </span><span class="java10">run</span><span class="java8">(){<br />
						&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0; </span><span class="java3">// Display a notification<br />
						&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0; </span><span class="java10">...<br />
						&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0; </span><span class="java8">}<br />
						&#xA0;&#xA0;&#xA0;&#xA0;&#xA0; })</span><span class="java10">;<br />
						&#xA0;&#xA0;&#xA0;&#xA0;&#xA0; </span><span class="java8">}<br />
						<br />
						&#xA0;&#xA0;&#xA0;&#xA0;&#xA0; </span><span class="java3">// Callback called when a message has been displayed by the remote<br />
						&#xA0;&#xA0;&#xA0;&#xA0;&#xA0; </span><span class="java4">public </span><span class="java9">void </span><span class="java10">onReportMessageDisplayed</span><span class="java8">(</span><span class="java10">String msgId</span><span class="java8">) {<br />
						&#xA0;&#xA0;&#xA0;&#xA0;&#xA0; </span><span class="java10">handler.post</span><span class="java8">(</span><span class="java4">new </span><span class="java10">Runnable</span><span class="java8">(){<br />
						&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0; </span><span class="java4">public </span><span class="java9">void </span><span class="java10">run</span><span class="java8">(){<br />
						&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0; </span><span class="java3">// Display a notification<br />
						&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0; </span><span class="java10">...<br />
						&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0; </span><span class="java8">}<br />
						&#xA0;&#xA0;&#xA0;&#xA0;&#xA0; })</span><span class="java10">;<br />
						&#xA0;&#xA0;&#xA0;&#xA0;&#xA0; </span><span class="java8">}<br />
						<br />
						&#xA0;&#xA0;&#xA0;&#xA0;&#xA0; </span><span class="java3">// Callback called when a message has failed to be delivered to the remote<br />
						&#xA0;&#xA0;&#xA0;&#xA0;&#xA0; </span><span class="java4">public </span><span class="java9">void </span><span class="java10">onReportMessageFailed</span><span class="java8">(</span><span class="java10">String msgId</span><span class="java8">) {<br />
						&#xA0;&#xA0;&#xA0;&#xA0;&#xA0; </span><span class="java10">handler.post</span><span class="java8">(</span><span class="java4">new </span><span class="java10">Runnable</span><span class="java8">(){<br />
						&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0; </span><span class="java4">public </span><span class="java9">void </span><span class="java10">run</span><span class="java8">(){<br />
						&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0; </span><span class="java3">// Display a notification<br />
						&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0; </span><span class="java10">...<br />
						&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0; </span><span class="java8">}<br />
						&#xA0;&#xA0;&#xA0;&#xA0;&#xA0; })</span><span class="java10">;<br />
						&#xA0;&#xA0;&#xA0;&#xA0;&#xA0; </span><span class="java8">}<br />
						<br />
						&#xA0;&#xA0;&#xA0;&#xA0;&#xA0; </span><span class="java3">// Callback called when an Is-composing event has been received<br />
						&#xA0;&#xA0;&#xA0;&#xA0;&#xA0; </span><span class="java4">public </span><span class="java9">void </span><span class="java10">onComposingEvent</span><span class="java8">(</span><span class="java4">final </span><span class="java9">boolean </span><span class="java10">status</span><span class="java8">) {<br />
						&#xA0;&#xA0;&#xA0;&#xA0;&#xA0; </span><span class="java10">handler.post</span><span class="java8">(</span><span class="java4">new </span><span class="java10">Runnable</span><span class="java8">() {<br />
						&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0; </span><span class="java4">public </span><span class="java9">void </span><span class="java10">run</span><span class="java8">(){<br />
						&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0; </span><span class="java4">if </span><span class="java8">(</span><span class="java10">status</span><span class="java8">) {<br />
						&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0; </span><span class="java10">...<br />
						&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0; </span><span class="java8">} </span><span class="java4">else </span><span class="java8">{<br />
						&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0; </span><span class="java10">...<br />
						&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0; </span><span class="java8">}<br />
						&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0; }<br />
						&#xA0;&#xA0;&#xA0;&#xA0;&#xA0; })</span><span class="java10">;<br />
						&#xA0;&#xA0;&#xA0;&#xA0;&#xA0; </span><span class="java8">}<br />
						&#xA0;&#xA0;&#xA0; }</span>
					</tt>
				</div>
				<p></p>
				<p>When leaving the <code>Activity</code> you can remove the listeners :</p>
				<div class="code-block">
					<tt class="java"><span class="java0">&#xA0;&#xA0;&#xA0; </span><span class="java14">/**<br />
						&#xA0;&#xA0;&#xA0;&#xA0; * Quit the session<br />
						&#xA0;&#xA0;&#xA0;&#xA0; */<br />
						&#xA0;&#xA0;&#xA0; </span><span class="java4">protected </span><span class="java9">void </span><span class="java10">quitSession</span><span class="java8">() {<br />
						&#xA0;&#xA0;&#xA0; </span><span class="java3">// Remove listener<br />
						&#xA0;&#xA0;&#xA0;&#xA0;&#xA0; </span><span class="java4">try </span><span class="java8">{<br />
						&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0; </span><span class="java4">if </span><span class="java8">(</span><span class="java10">chat != </span><span class="java4">null</span><span class="java8">) {<br />
						&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0; </span><span class="java10">chat.removeEventListener</span><span class="java8">(</span><span class="java10">chatListener</span><span class="java8">)</span><span class="java10">;<br />
						&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0; </span><span class="java8">}<br />
						&#xA0;&#xA0;&#xA0;&#xA0;&#xA0; } </span><span class="java4">catch</span><span class="java8">(</span><span class="java10">Exception e</span><span class="java8">) {<br />
						&#xA0;&#xA0;&#xA0;&#xA0;&#xA0; }<br />
						&#xA0;&#xA0;&#xA0;&#xA0;&#xA0; </span><span class="java10">chat = </span><span class="java4">null</span><span class="java10">;<br />
						&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0; <br />
						&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0; </span><span class="java3">// Exit activity<br />
						&#xA0;&#xA0;&#xA0; </span><span class="java10">finish</span><span class="java8">()</span><span class="java10">;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0; <br />
						&#xA0;&#xA0;&#xA0; </span><span class="java8">}&#xA0;&#xA0; </span>
					</tt>
				</div>
				<p></p>
			</div>
			</br>
		</div>
	</div>
</div>