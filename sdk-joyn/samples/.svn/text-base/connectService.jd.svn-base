page.title=How to connect to a joyn service
doc.type=samples
@jd:body
<div class="background-sdk">
	<div class="content-block" style="min-height:700px;">
		<div class="intro center">
			<p><h1>How to connect to a joyn service</h1></p>
			<p><span>Learn how to instantiate a joyn service, connect to it and register listeners</span></p>
		</div>
		
		<div class="content-body center">
			<div class="guide-block">
				<h2>Get service instance, connect/disconnect</h2>
				<p></p>
				<p>First, create a new Android <code>Activity</code> implementing <a href="{@docRoot}javadoc/org/gsma/joyn/JoynServiceListener.html">JoynServiceListener.</a></p>
				<div class="code-block">
					<!--Generated HTML from java using Java2Html Converter -->
					<tt class="java"><span class="java4">public class </span><span class="java10">MyActivity </span><span class="java4">extends </span><span class="java10">Activity </span><span class="java4">implements </span><span class="java10">JoynServiceListener </span><span class="java8">{<br />
					&#xA0; <br />
					&#xA0; </span><span class="java10">...<br />
					<br />
					</span><span class="java8">}&#xA0; </span></tt>
				</div>
				<p></p>
				<p>When using joyn APIs, in order to get the instance of a specific service you must call its constructor. In this example we will create a new instance of <a href="{@docRoot}javadoc/org/gsma/joyn/capability/CapabilityService.html">CapabilityService</a>. All service constructors have <a href="{@docRoot}javadoc/org/gsma/joyn/JoynServiceListener.html">JoynServiceListener</a> as argument.
				<p>We call the constructor on the <code>onCreate</code> event of the Android life-cycle.</p>
				<div class="code-block">
					<!--Generated HTML from java using Java2Html Converter -->
					<tt class="java"><span class="java0">&#xA0;&#xA0;&#xA0; </span><span class="java14">/**<br />
						&#xA0;&#xA0;&#xA0;&#xA0; * Capability API<br />
						&#xA0;&#xA0;&#xA0;&#xA0; */<br />
						&#xA0;&#xA0;&#xA0; </span><span class="java4">private </span><span class="java10">CapabilityService capabilityApi;<br />
						&#xA0; <br />
						&#xA0;&#xA0;&#xA0; </span><span class="java16">@Override<br />
						&#xA0;&#xA0;&#xA0; </span><span class="java4">public </span><span class="java9">void </span><span class="java10">onCreate</span><span class="java8">(</span><span class="java10">Bundle savedInstanceState</span><span class="java8">) {<br />
						&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0; </span><span class="java4">super</span><span class="java10">.onCreate</span><span class="java8">(</span><span class="java10">savedInstanceState</span><span class="java8">)</span><span class="java10">;<br />
						&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0; <br />
						&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0; </span><span class="java3">//Activity setters<br />
						&#xA0; <br />
						&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0; ...<br />
						&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0; <br />
						&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0; </span><span class="java3">// Instanciate API<br />
						&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0; </span><span class="java10">capabilityApi = </span><span class="java4">new </span><span class="java10">CapabilityService</span><span class="java8">(</span><span class="java10">getApplicationContext</span><span class="java8">()</span><span class="java10">, </span><span class="java4">this</span><span class="java8">)</span><span class="java10">;<br />
						<br />
						&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0; ...<br />
						&#xA0;&#xA0;&#xA0; </span><span class="java8">}</span>
					</tt>
				</div>
				<p></p>
				<p>Now that we have an instance of our desired service we can connect to it.</p>
				<div class="code-block">
					<!--Generated HTML from java using Java2Html Converter -->
					
					<tt class="java"><span class="java0">&#xA0;&#xA0;&#xA0; </span><span class="java16">@Override<br />
						&#xA0;&#xA0;&#xA0; </span><span class="java4">public </span><span class="java9">void </span><span class="java10">onCreate</span><span class="java8">(</span><span class="java10">Bundle savedInstanceState</span><span class="java8">) {<br />
						&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0; <br />
						&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0; ...<br />
						&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0; <br />
						&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0; </span><span class="java3">// Instanciate API<br />
						&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0; </span><span class="java10">capabilityApi = </span><span class="java4">new </span><span class="java10">CapabilityService</span><span class="java8">(</span><span class="java10">getApplicationContext</span><span class="java8">()</span><span class="java10">, </span><span class="java4">this</span><span class="java8">)</span><span class="java10">;<br />
						<br />
						&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0; </span><span class="java3">// Connect API<br />
						&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0; </span><span class="java10">capabilityApi.connect</span><span class="java8">()</span><span class="java10">;<br />
						&#xA0;&#xA0;&#xA0; </span><span class="java8">}</span>
					</tt>				
				</div>
				<p></p>
				<p>Finally we overrride the <code>onDistroy</code> event of the Android life-cycle in order to disconnect from the service when the <code>Activity</code> is closed.</p>
				<div class="code-block">
					<!--Generated HTML from java using Java2Html Converter -->
					
					<tt class="java"><span class="java0">&#xA0;&#xA0;&#xA0; </span><span class="java16">@Override<br />
						&#xA0;&#xA0;&#xA0; </span><span class="java4">public </span><span class="java9">void </span><span class="java10">onDestroy</span><span class="java8">() {<br />
						&#xA0;&#xA0;&#xA0;&#xA0;&#xA0; </span><span class="java4">super</span><span class="java10">.onDestroy</span><span class="java8">()</span><span class="java10">;<br />
						&#xA0;&#xA0;&#xA0;&#xA0;&#xA0; <br />
						&#xA0;&#xA0;&#xA0; </span><span class="java3">// Disconnect API<br />
						&#xA0;&#xA0;&#xA0;&#xA0;&#xA0; </span><span class="java10">capabilityApi.disconnect</span><span class="java8">()</span><span class="java10">;<br />
						&#xA0;&#xA0;&#xA0; </span><span class="java8">}</span>
					</tt>
				</div>
				<p></p>
				
			</div>
			</br>
			</br>			
			<div class="guide-block">
				<h2>Implementing Listener methods and manage connections</h2>
				<p></p>
				<p><a href="{@docRoot}javadoc/org/gsma/joyn/JoynServiceListener.html">JoynServiceListener</a> contains four different methods that need to be implemented.</p>	
				<p>
					<ul>
						<li>
							<a href="{@docRoot}javadoc/org/gsma/joyn/JoynServiceListener.html#onServiceConnected()">onServiceConnected</a>
						</li>
						<li>
							<a href="{@docRoot}javadoc/org/gsma/joyn/JoynServiceListener.html#onServiceDisconnected()">onServiceDisonnected</a>
						</li>
						<li>
							<a href="{@docRoot}javadoc/org/gsma/joyn/JoynServiceListener.html#onServiceRegistered()">onServiceRegistered</a>
						</li>
						<li>
							<a href="{@docRoot}javadoc/org/gsma/joyn/JoynServiceListener.html#onServiceUnregistered()">onServiceUnegistered</a>
						</li>
					</ul>
				</p>
				<p></p>
				<p>As service connection is asynchronous, the <code>onServiceConnected</code> method is used to add specific operations for when the service is connected.</p> 
				<p>Methods from the API cannot be used before the service is connected.</p>
				<p>In this example we use the <a href="{@docRoot}javadoc/org/gsma/joyn/capability/CapabilityService.html">CapabilityService</a> API. We can use the <code>getMyCapabilities</code> method once we are connected.</p>				
				<p></p>
				<div class="code-block">
					<!--Generated HTML from java using Java2Html Converter -->
					<tt class="java"><span class="java0">&#xA0;&#xA0;&#xA0; </span><span class="java14">/**<br />
						&#xA0;&#xA0;&#xA0;&#xA0; * Callback called when service is connected. This method is called when the<br />
						&#xA0;&#xA0;&#xA0;&#xA0; * service is well connected to the RCS service (binding procedure successfull):<br />
						&#xA0;&#xA0;&#xA0;&#xA0; * this means the methods of the API may be used.<br />
						&#xA0;&#xA0;&#xA0;&#xA0; */<br />
						&#xA0;&#xA0;&#xA0; </span><span class="java4">public </span><span class="java9">void </span><span class="java10">onServiceConnected</span><span class="java8">() {<br />
						&#xA0;&#xA0;&#xA0;&#xA0;&#xA0; </span><span class="java4">try </span><span class="java8">{<br />
						&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0; </span><span class="java3">// Get the current capabilities from the RCS contacts API<br />
						&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0; </span><span class="java10">Capabilities capabilities = capabilityApi.getMyCapabilities</span><span class="java8">()</span><span class="java10">;<br />
						&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0; <br />
						&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0; </span><span class="java3">// Set ihm components to show capabilities<br />
						<br />
						&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0; </span><span class="java10">...<br />
						&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0; <br />
						&#xA0;&#xA0;&#xA0;&#xA0;&#xA0; </span><span class="java8">} </span><span class="java4">catch</span><span class="java8">(</span><span class="java10">JoynServiceNotAvailableException e</span><span class="java8">) {<br />
						&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0; </span><span class="java10">e.printStackTrace</span><span class="java8">()</span><span class="java10">;<br />
						&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0; ...<br />
						&#xA0;&#xA0;&#xA0;&#xA0;&#xA0; </span><span class="java8">} </span><span class="java4">catch</span><span class="java8">(</span><span class="java10">JoynServiceException e</span><span class="java8">) {<br />
						&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0; </span><span class="java10">e.printStackTrace</span><span class="java8">()</span><span class="java10">;<br />
						&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0; ...<br />
						&#xA0;&#xA0;&#xA0;&#xA0;&#xA0; </span><span class="java8">}<br />
						&#xA0;&#xA0;&#xA0; }</span>
					</tt>
				</div>
				<p></p>
				<p>The <code>onServiceDisconnected</code> method can be used to show user messages or to trace disconnection.</p>
				<p></p>
				<p>The <code>onServiceRegistered</code> and <code>onServiceUnregistered</code> are called when the service linked to the event successfully registers and unregisters with a remote IMS server. Use these methods to control calls to the remote servers.</p>
				<p></p>
				</br>
			</div>
		</div>
	</div>
</div>